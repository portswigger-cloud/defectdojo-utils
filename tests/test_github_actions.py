import os
import pytest
import defectdojo.src.github_actions as github_actions


@pytest.fixture
def github_output_env_var(tmpdir) -> pytest.fixture():
    os.environ["GITHUB_OUTPUT"] = f"{tmpdir}/github_output"
    yield os.environ["GITHUB_OUTPUT"]


@pytest.fixture
def github_step_summary_env_var(tmpdir) -> pytest.fixture():
    os.environ["GITHUB_STEP_SUMMARY"] = f"{tmpdir}/github_step_summary"
    yield os.environ["GITHUB_STEP_SUMMARY"]


@pytest.fixture
def output_data():
    yield {
        "total": 10,
        "critical": 2,
        "high": 2,
        "medium": 2,
        "low": 2,
        "info": 2,
    }


@pytest.fixture
def set_summary_data(output_data):
    data = output_data.copy()
    data["product"] = "test_product"
    yield data


def test_set_action_outputs(tmpdir, github_output_env_var, output_data):
    file = tmpdir.join("github_output")
    github_actions.set_action_outputs(output_data)
    assert file.read() == "total=10\ncritical=2\nhigh=2\nmedium=2\nlow=2\ninfo=2\n"


def test_active_findings_markdown_step_summary(
    tmpdir, github_step_summary_env_var, set_summary_data
):
    file = tmpdir.join("github_step_summary")
    github_actions.active_findings_markdown_step_summary(**set_summary_data)
    assert (
        file.read()
        == "## DefectDojo active security findings summary\n### test_product\n* __Total:__ 10\n* __Critical:__ 2\n\
* __High:__ 2\n* __Medium:__ 2\n* __Low:__ 2\n* __Info:__ 2\n\n__Generated by:__ _portswigger-cloud_ _defectdojo-active-findings_\n\
:sauropod:\n\n"
    )
